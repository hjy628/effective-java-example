创建和销毁对象


1.考虑用静态工厂方法代替构造器
    静态工程方法与构造器不同的第一大优势在于，他们有名称。
    静态工程方法与构造器不同的第二大优势在于，不必在每次调用他们的时候都创建一个新对象。
    静态工程方法与构造器不同的第三大优势在于，他们可以返回原返回类型的任何子类型的对象。
    静态工程方法与构造器不同的第四大优势在于，在创建参数化类型实例的时候，他们使代码变得更加简洁。
    静态工程方法的主要缺点在于，类如果不含公有的或者受保护的构造器，就不能被子类化。
    静态工程方法的第二个缺点在于，他们与其他的静态方法实际上没有任何区别。




单元素的枚举类型已经成为实现SingleTon的最佳方法


4: 通过私有构造器强化不可实例化的能力


5:避免创建不必要的对象
    一般来说，最好能重用对象而不是在每次必要的时候就创建一个相同功能的新对象。


    适配器是指这样一个对象:它把功能委托给一个后备对象之外，没有其他的状态信息，所以针对某个给定对象的特定适配器而言，它不需要创建多个适配器实例


6: 消除过期的对象引用　　参见StackBad类

一般而言，只要类是自己管理内存，程序员就应该警惕内存泄漏问题。一旦元素被释放掉，则该元素中包含的任何对象引用都应该被清空。

内存泄露的另一个常见来源是缓存。

如果在缓存之外存在对某个项的键的引用，该项就有意义，那么就可以用WeakHashMap代表缓存；当缓存中的项过期之后，他们就会自动被删除。
只有当所要的缓存项的生命周期是由该键的外部引用而不是由值决定时，WeakHashMap才有用处。

内存泄露的第三个常见来源是监听器和其他回调.