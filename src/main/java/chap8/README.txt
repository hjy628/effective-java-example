通用程序设计
        讨论java语言的具体细节，讨论了局部变量的处理、控制结构、类库的用法、各种数据类型的用法，
        以及两种不是由语言本身提供的机制(reflection和native method,反射机制和本地方法),最后讨论了优化和命名惯例。

45:将局部变量的作用域最小化
            要使局部变量的作用域最小化，最有力的方法就是在第一次使用它的地方声明
            几乎每个局部变量的声明都应该包含一个初始化表达式

46:for-each循环优先于传统的for循环

            三种情况无法使用for-each循环:
                    1:过滤，如果需要遍历集合，并删除选定的元素，就需要使用显式的迭代器，以便可以调用它的remove方法
                    2:转换，如果需要遍历列表或者数组，并取代它部分或全部的元素值，就需要列表迭代器或者数组索引，以便设定元素的值
                    3:平行迭代，如果需要并行地遍历多个集合，就需要显示地控制迭代器或者索引变量，以便所有迭代器或者索引变量都可以得到同步前移

47:了解和使用类库

48:如果需要精确地答案，请避免使用float和double

                使用BigDecimal有两个缺点: 与使用基本运算类型相比，这样做很不方便，而且很慢

 49:基本类型优先于装箱基本类型

                    基本类型和装箱基本类型之间有三个主要区别：
                        1:基本类型只有值，而装箱基本类型则具有与他们的值不同的同一性
                        2:基本类型只有功能完备的值，而每个装箱基本类型除了它对应基本类型的所有功能值之外，还有个非功能值:null
                        3:基本类型通常比装箱基本类型更节省时间和空间


  50:如果其他类型更适合，则尽量避免使用字符串
        字符串不适合替代其他的值类型。
        字符串和适合代替枚举类型。
        字符串不适合替代聚集类型。
        字符串也不适合代替能力表

  51:当心字符串连接的性能
        字符串连接操作符(+,String concatenation operator)是把多个字符串合并为一个字符串的遍历途径。
        要想产生单独一行的输出，或者构造一个字符串来表示一个较小的，大小固定的对象，使用连接操作符是非常合适的
        但是它不适合运用在大规模的场景中。为连接n个字符串而重复地使用字符串连接操作符，需要n的平方级的时间，这是由于字符串不可变而导致的不幸结果
        当两个字符串被连接在一起时，它们的内容都要被拷贝

        原则:不要使用字符串连接操作符来合并多个字符串，除非性能无关紧要，相反，应该使用StringBuilder的append方法，
        另一种方法是，使用字符数组，或者每次只处理一个字符串，而不是将它们组合起来。


52:通过接口引用对象
        如果有合适的接口类型存在，那么对于参数、返回值、变量和域来说，就都应该使用接口类型进行声明。


 53:接口优先于反射机制
        核心反射机制(core reflection facility)java.lang.reflect,提供了“通过程序来访问关于已装载的类的信息”的能力
        反射机制的代价:
            1:丧失了编译时类型检查的好处
            2:执行反射访问所需要的代码非常笨拙和冗长
            3:性能损失

  54:谨慎地使用本地方法
        本地方法主要有三种用途：
            1:提供了"访问特定于平台的机制"的能力，比如访问注册表和文件锁
            2:提供了访问遗留代码库的能力，从而可以访问遗留数据
            3:可以通过本地语言，编写应用程序中注重性能的部分，以提高系统的性能。

  55:谨慎地进行优化
        1:很多计算上的过失都被归咎于效率(没有必要达到的效率)，而不是任何其他的原因-甚至包括盲目地做傻事
        2:不要去计较效率上的一些小小的得失，在97%的情况下，不成熟的优化才是一切问题的根源。
        3:在优化方面，两个规则: 1:不要进行优化； 2(仅针对专家):还是不要进行优化--也就是说，在你还没有绝对清晰的未优化方案之前，请不要进行优化


  56:准守普遍接受的命名惯例
            类型参数名称通常由单个字母组成。这个字母通常是以下五种类型之一: T表示任意的类型 ; E表示集合的元素类型；K和V表示映射的键和值类型；X表示异常