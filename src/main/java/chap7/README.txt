方法

      本章主要讨论方法设计的几个方面:
        如何处理参数和返回值；
        如何设计方法签名；
        如何为方法编写文档；



38:检查参数的有效性
        对于公有的方法，要用javadoc的@throws标签在文档中说明违反参数限制时会抛出的异常
        对于未被导出的方法(unexported method),作为包的创建者，你可以控制这个方法将在哪些情况下被调用，因此你可以，也应该确保只将有效的参数值传递进来
        因此，非公有的方法通常应该使用断言(assertion)来检查它们的参数。


39:必要时进行保护性拷贝

40:谨慎设计方法签名
                谨慎地选择方法的名称: 方法的名称应该始终遵循标准的命名习惯,首要目标应该是选择易于理解的，并且与同一个包中的其他名称风格一致的名称，第二个目标应该是选择与大众认可的名称相一致的名称
                不要过于追求提供便利的方法：方法太多会使类难以学习、使用、文档化、测试和维护
                避免过长的参数列表：目标是四个参数，或者更少   1：把方法分解成多个方法 2:创建辅助类，用来保存参数的分组 3: 从对象构建到方法调用都采用Builder模式
                对于参数类型，要优先使用接口而不是类，对于boolean参数，要优先使用两个元素的枚举类型


41:慎用重载


42:慎用可变参数
        java1.5新增可变参数方法，可变参数方法接受0个或者多个指定类型的参数，可变参数机制通过先创建一个数组，数组的大小为在调用位置所传递的参数数量，
        然后将参数值传到数组中，最后将数组传递给方法。
                static int sum(int... args){
                    int sum = 0;
                    for(int arg: args)
                        sum += arg;
                        return sum;
                }


43:返回零长度的数组或者集合，而不是null


44:为所有导出的API元素编写文档注释
        javadoc利用特殊格式的文档注释，根据源代码自动产生API文档
        为了正确地编写API文档，必须在每个被导出的类、接口、构造器、方法和域声明之前增加一个文档注释
        方法的文档注释应该简洁地描述出它和客户端之间的约定。这个约定应该说明这个方法做了什么，而不是如何完成这项工作的。
        文档注释应该列举出这个方法的所有前提条件(precondition)和后置条件(postcondition)
        所谓的前提条件是指为了使客户能够调用这个方法，而必须要满足的条件
        所谓后置条件是指在调用成功完成后，哪些条件必须要满足。
        一般情况下，前提条件是有@throws标签针对未受检的异常所隐含描述的；每个未受检的异常都对应一个前提违例，同样可以在一些受影响的参数的@param标记中制定前提条件
        除了前提条件和后置条件之外，每个方法还应该在文档中描述它的副作用(side effect)。所谓副作用是指系统状态中可以观察到的变化，它不是为了获得后置条件而明确要求的变化。
